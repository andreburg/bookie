
package view;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import controller.BookController;
import controller.BorrowerController;
import controller.ValidationController;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import model.Book;
import model.Borrower;

/**
 *
 * @author olwia
 */
public class BooksManager extends javax.swing.JPanel {

    /**
     * Creates new form BooksManager
     */
    public BooksManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableBook = new javax.swing.JTable();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JButton BtnAdd = new javax.swing.JButton();
        BtnMain = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        tfBookID = new javax.swing.JTextField();
        tfBookISBNCode = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        tfBookTitle = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        tfBookGenre = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        tfBookReturnedDate = new javax.swing.JTextField();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        tfBookLastBorrowedDate = new javax.swing.JTextField();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        tfBorrowerID = new javax.swing.JTextField();
        javax.swing.JButton BtnView = new javax.swing.JButton();
        cbxAvailable = new javax.swing.JCheckBox();
        BtnSearch = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        BtnReset = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1080, 540));
        setLayout(null);

        TableBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Genre", "ISBN Code", "Availability ", "LBD", "Date Returned", "Borrower ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableBookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableBook);

        add(jScrollPane1);
        jScrollPane1.setBounds(6, 311, 1006, 226);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setText("Books");
        add(jLabel1);
        jLabel1.setBounds(430, 10, 230, 50);

        BtnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnAdd.setText("Add");
        BtnAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });
        add(BtnAdd);
        BtnAdd.setBounds(838, 121, 174, 31);

        BtnMain.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnMain.setText("Main Menu");
        BtnMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMainActionPerformed(evt);
            }
        });
        add(BtnMain);
        BtnMain.setBounds(840, 70, 170, 31);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("ID:");
        add(jLabel2);
        jLabel2.setBounds(30, 90, 16, 16);

        tfBookID.setToolTipText("Enter ID");
        add(tfBookID);
        tfBookID.setBounds(20, 110, 240, 26);

        tfBookISBNCode.setToolTipText("Enter ISBN code");
        add(tfBookISBNCode);
        tfBookISBNCode.setBounds(290, 110, 240, 26);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Title:");
        add(jLabel4);
        jLabel4.setBounds(30, 150, 110, 16);

        tfBookTitle.setToolTipText("Enter book title");
        add(tfBookTitle);
        tfBookTitle.setBounds(20, 170, 240, 26);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("ISBN Code:");
        add(jLabel5);
        jLabel5.setBounds(300, 90, 190, 16);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Genre:");
        add(jLabel6);
        jLabel6.setBounds(30, 220, 130, 16);

        tfBookGenre.setToolTipText("Enter book genre");
        add(tfBookGenre);
        tfBookGenre.setBounds(20, 240, 240, 26);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Returned Date:");
        add(jLabel7);
        jLabel7.setBounds(570, 90, 150, 16);

        tfBookReturnedDate.setToolTipText("Enter returned date");
        tfBookReturnedDate.setEnabled(false);
        add(tfBookReturnedDate);
        tfBookReturnedDate.setBounds(560, 110, 250, 26);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Availability:");
        add(jLabel8);
        jLabel8.setBounds(300, 150, 200, 16);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Borrower ID:");
        add(jLabel9);
        jLabel9.setBounds(570, 150, 120, 16);

        tfBookLastBorrowedDate.setToolTipText("Enter last borrowed date");
        tfBookLastBorrowedDate.setEnabled(false);
        tfBookLastBorrowedDate.setName(""); // NOI18N
        add(tfBookLastBorrowedDate);
        tfBookLastBorrowedDate.setBounds(290, 240, 240, 26);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Last Borrowed Date:");
        add(jLabel10);
        jLabel10.setBounds(300, 220, 120, 16);

        tfBorrowerID.setToolTipText("Enter Borrower ID");
        tfBorrowerID.setName(""); // NOI18N
        add(tfBorrowerID);
        tfBorrowerID.setBounds(560, 170, 240, 26);

        BtnView.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnView.setText("View All");
        BtnView.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewActionPerformed(evt);
            }
        });
        add(BtnView);
        BtnView.setBounds(840, 170, 80, 30);

        cbxAvailable.setText("IS BOOKED OUT?");
        cbxAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxAvailableMouseClicked(evt);
            }
        });
        add(cbxAvailable);
        cbxAvailable.setBounds(300, 170, 180, 20);

        BtnSearch.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnSearch.setText("Search ID");
        BtnSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        add(BtnSearch);
        BtnSearch.setBounds(930, 170, 79, 27);

        BtnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnUpdate.setText("Update");
        BtnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnUpdate.setEnabled(false);
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });
        add(BtnUpdate);
        BtnUpdate.setBounds(840, 220, 170, 27);

        BtnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnDelete.setText("Delete");
        BtnDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnDelete.setEnabled(false);
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });
        add(BtnDelete);
        BtnDelete.setBounds(840, 260, 160, 27);

        BtnReset.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnReset.setText("Reset");
        BtnReset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResetActionPerformed(evt);
            }
        });
        add(BtnReset);
        BtnReset.setBounds(580, 230, 79, 27);
    }// </editor-fold>//GEN-END:initComponents
private BookController bc;
    ValidationController vc = new ValidationController();
    Book book;   
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
    
    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
        try {
            bc = new BookController();
            vc = new ValidationController();

            int id = Integer.parseInt(tfBookID.getText().trim()); // Ensure input is trimmed to avoid NumberFormatException           
            String title = tfBookTitle.getText().trim();    // Getting text input directly for title, genre, and ISBN
            String genre = tfBookGenre.getText().trim();
            String isbn = tfBookISBNCode.getText().trim();            
            boolean isAvailable = cbxAvailable.isSelected(); // Getting boolean value from JCheckBox

            Date LBD = null;
            Date RD = null;
            int borrowerID = 0;
           
            if (!isAvailable) { // Check if the book is checked out                    
                String lastBorrowedDateText = tfBookLastBorrowedDate.getText().trim();  // Parsing dates with proper format
                String returnedDateText = tfBookReturnedDate.getText().trim();

                if (!lastBorrowedDateText.isEmpty() && !returnedDateText.isEmpty()) {
                    try {
                        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        LBD = formatter.parse(lastBorrowedDateText);
                        RD = formatter.parse(returnedDateText);
                    } catch (ParseException e) {
                        JOptionPane.showMessageDialog(null, "Error: Date format should be yyyy-MM-dd", "Validation Error", JOptionPane.ERROR_MESSAGE);
                        return; // Exit if date parsing fails
                    }
                }
                
                try {   // Parsing borrower ID as integer
                    if (tfBorrowerID.getText().isBlank()){
                        borrowerID = 0;
                    } else {
                      borrowerID = Integer.parseInt(tfBorrowerID.getText().trim()); 
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid borrower ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit if borrower ID parsing fails
                }
            }
           
            book = new Book(id, title, genre, isbn, isAvailable, LBD, RD, borrowerID);  // Create new Book object
           
            ValidationController.ValidationResult result = vc.validateBook(book);   // Validate book using ValidationController

            if (result.isValid()) {
                if (isAvailable || borrowerID == 0 || borrowerExists(borrowerID)) {                    
                    bc.addBook(book);   // Add book to the database                   
                    populateTable(false, true); // Pull and update the table from DB
                    JOptionPane.showMessageDialog(null, "Book " + book.getId() + " successfully added!");
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Borrower " + borrowerID + " does not exist", "Validation Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {               
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE); // Display error dialog with the validation result
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid input for numeric fields", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(); // Print stack trace for debugging purposes
        }
    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMainActionPerformed
        JFrame parentFrame = (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);
        if (parentFrame != null) {
            parentFrame.dispose();
        } else {
            System.out.println("No parent frame found.");
        }
        MainDashboard md = new MainDashboard();
        md.setVisible(true);
    }//GEN-LAST:event_BtnMainActionPerformed

    private void BtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewActionPerformed
        populateTable(false, false);
    }//GEN-LAST:event_BtnViewActionPerformed

    private void TableBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableBookMouseClicked
        int selectedRow = TableBook.getSelectedRow();   // Check if a row is selected

        if (selectedRow != -1) {           
            Object idValue = TableBook.getValueAt(selectedRow, 0);  // Get values from the selected row
            Object titleValue = TableBook.getValueAt(selectedRow, 1);
            Object genreValue = TableBook.getValueAt(selectedRow, 2);
            Object isbnValue = TableBook.getValueAt(selectedRow, 3);
            Object availabilityValue = TableBook.getValueAt(selectedRow, 4);
            Object lastBorrowedDateValue = TableBook.getValueAt(selectedRow, 5);
            Object returnedDateValue = TableBook.getValueAt(selectedRow, 6);
            Object borrowerIDValue = TableBook.getValueAt(selectedRow, 7);
           
            String id = idValue != null ? idValue.toString() : "";  // Convert to String, defaulting to empty string if null
            String title = titleValue != null ? titleValue.toString() : "";
            String genre = genreValue != null ? genreValue.toString() : "";
            String isbn = isbnValue != null ? isbnValue.toString() : "";
            String availability = availabilityValue != null ? availabilityValue.toString() : "";
            String lastBorrowedDate = lastBorrowedDateValue != null ? lastBorrowedDateValue.toString() : "";
            String returnedDate = returnedDateValue != null ? returnedDateValue.toString() : "";
            String borrowerID = borrowerIDValue != null ? borrowerIDValue.toString() : "";
           
            tfBookID.setText(id);   // Set the values in text fields
            tfBookTitle.setText(title);
            tfBookGenre.setText(genre);
            tfBookISBNCode.setText(isbn);
            tfBookLastBorrowedDate.setText(lastBorrowedDate);
            tfBookReturnedDate.setText(returnedDate);
            tfBorrowerID.setText(borrowerID);            
            cbxAvailable.setSelected(Boolean.parseBoolean(availability));   // Set checkbox state
            
            tfBookID.setEnabled(false); // Disable the ID field (not editable) and enable update and delete buttons
            if (cbxAvailable.isSelected()){
                tfBookLastBorrowedDate.setEnabled(true);
                tfBookReturnedDate.setEnabled(true);
            } else {
                tfBookLastBorrowedDate.setEnabled(false);
                tfBookReturnedDate.setEnabled(false);
            }              
            BtnUpdate.setEnabled(true);
            BtnDelete.setEnabled(true);
        } else {           
            clearFields();  // No row is selected, clear fields and disable buttons
            tfBookID.setEnabled(true);
            BtnUpdate.setEnabled(false);
            BtnDelete.setEnabled(false);
        }
    }//GEN-LAST:event_TableBookMouseClicked

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
        populateTable(true, false);
    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        try {
            bc = new BookController();
            vc = new ValidationController();
            
            int id = Integer.parseInt(tfBookID.getText().trim());   // Parse and validate input fields
            String title = tfBookTitle.getText().trim();
            String genre = tfBookGenre.getText().trim();
            String isbn = tfBookISBNCode.getText().trim();
            boolean isAvailable = cbxAvailable.isSelected(); // Directly gets the boolean value

            Date lastBorrowedDate = null;
            Date returnedDate = null;
            String lastBorrowedDateText = tfBookLastBorrowedDate.getText().trim();
            String returnedDateText = tfBookReturnedDate.getText().trim();
            int borrowerID = 0;
            
            if (isAvailable) {  // Check if the book is being borrowed
                if (!lastBorrowedDateText.isEmpty()) {
                    try {
                        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        lastBorrowedDate = formatter.parse(lastBorrowedDateText);
                    } catch (ParseException e) {
                        JOptionPane.showMessageDialog(null, "Error: Date format should be yyyy-MM-dd", "Validation Error", JOptionPane.ERROR_MESSAGE);
                        return; // Exit if date parsing fails
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Last Borrowed Date is required when the book is being borrowed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit if last borrowed date is empty
                }

                if (!returnedDateText.isEmpty()) {
                    try {
                        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        returnedDate = formatter.parse(returnedDateText);
                    } catch (ParseException e) {
                        JOptionPane.showMessageDialog(null, "Error: Date format should be yyyy-MM-dd", "Validation Error", JOptionPane.ERROR_MESSAGE);
                        return; // Exit if date parsing fails
                    }
                }
               
                String borrowerIDText = tfBorrowerID.getText().trim();  // Parse borrower ID as integer if it is not empty
                if (!borrowerIDText.isEmpty()) {
                    try {
                        borrowerID = Integer.parseInt(borrowerIDText);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Error: Invalid borrower ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
                        return; // Exit if borrower ID parsing fails
                    }
                }
            }
            
            book = new Book(id, title, genre, isbn, isAvailable, lastBorrowedDate, returnedDate, borrowerID);   // Create a Book object
           
            ValidationController.ValidationResult result = vc.validateBook(book);   // Validate book using ValidationController
            if (result.isValid()) {
                if (isAvailable && borrowerID == 0 || borrowerExists(borrowerID)) {                  
                bc.updateBook(book);    // Update book in the database               
                populateTable(false, true); // Pull and update the table from DB
                JOptionPane.showMessageDialog(null, "Book " + book.getId() + " successfully updated!");                
                clearFields();  // Clear fields
                } else {
                   JOptionPane.showMessageDialog(null, "Error: Borrower " + borrowerID + " does not exist", "Validation Error", JOptionPane.ERROR_MESSAGE); 
                }               
            } else {                
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE); // Display error dialog with the validation result
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Invalid number format. Please check your input.", "Format Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        try {
            bc = new BookController();          
            int id = Integer.parseInt(tfBookID.getText().trim());   // Parse input field           
            book = new Book(id, "", "", "", true, null, null, 0);   // Create a Book object with only ID (other fields are irrelevant for delete)           
            bc.deleteBook(book);    // Delete book from the database            
            populateTable(false, true); // Pull and update the table from DB
            JOptionPane.showMessageDialog(null, "Book " + book.getId() + " successfully deleted!");          
            clearFields();  // Clear fields
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Invalid number format. Please check your input.", "Format Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResetActionPerformed
        clearFields();
        tfBookID.setEnabled(true);
        BtnUpdate.setEnabled(false);
        BtnDelete.setEnabled(false);
        TableBook.clearSelection();
    }//GEN-LAST:event_BtnResetActionPerformed

    private void cbxAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxAvailableMouseClicked
        if (cbxAvailable.isSelected()){
            tfBookLastBorrowedDate.setEnabled(true);
            tfBookReturnedDate.setEnabled(true); 
        } else {
            tfBookLastBorrowedDate.setEnabled(false);
            tfBookReturnedDate.setEnabled(false); 
        }    
    }//GEN-LAST:event_cbxAvailableMouseClicked

    private void populateTable(boolean search, boolean update) {
        try {
            bc = new BookController();
            DefaultTableModel model = (DefaultTableModel) TableBook.getModel();
            if (search) {               
                bc.viewAllBooks(tfBookID.getText());    // Perform search
            } else {               
                bc.viewAllBooks("");    // Retrieve all books
            }

            List<Book> books = bc.getBooks();            
            model.setRowCount(0);   // Clear existing rows

            if (books.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No books found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {                
                for (Book book : books) {   // Populate the table with new data
                    Object[] row = { book.getId(), book.getTitle(), book.getGenre(), book.getIsbn(), book.isAvailable(), book.getLastBorrowed(), book.getDateReturned(), book.getBorrowerID() };
                    model.addRow(row);
                }
                if (!update) {
                    JOptionPane.showMessageDialog(null, "Books table successfully pulled!");
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Book table not pulled!", "Read Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }
    
    private void clearFields() {
        tfBookID.setText("");
        tfBookTitle.setText("");
        tfBookGenre.setText("");
        tfBookISBNCode.setText("");
        cbxAvailable.setSelected(false); // Changed to checkbox
        tfBookLastBorrowedDate.setEnabled(false);
        tfBookReturnedDate.setEnabled(false); 
        tfBookLastBorrowedDate.setText("");
        tfBookReturnedDate.setText("");
        tfBorrowerID.setText("");
    }
    
    private boolean borrowerExists(int borrowerID) {
        try {
            BorrowerController bc = new BorrowerController();            
            bc.viewAllBorrowers("");    // Retrieve all borrowers            
            List<Borrower> borrowers = bc.getBorrowers();   // Get the list of all borrowers            
            for (Borrower borrower : borrowers) {   // Check if any borrower's ID matches the provided borrowerID
                if (borrower.getId() == borrowerID) {
                    return true; // Borrower ID found
                }
            }           
            return false;   // No matching borrower ID found
        } catch (Exception ex) {           
            ex.printStackTrace();   // Print exception to the console and return false
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnMain;
    private javax.swing.JButton BtnReset;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTable TableBook;
    private javax.swing.JCheckBox cbxAvailable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfBookGenre;
    private javax.swing.JTextField tfBookID;
    private javax.swing.JTextField tfBookISBNCode;
    private javax.swing.JTextField tfBookLastBorrowedDate;
    private javax.swing.JTextField tfBookReturnedDate;
    private javax.swing.JTextField tfBookTitle;
    private javax.swing.JTextField tfBorrowerID;
    // End of variables declaration//GEN-END:variables
}
