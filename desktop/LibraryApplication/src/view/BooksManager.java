/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import controller.BookController;
import controller.ValidationController;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import model.Book;

/**
 *
 * @author olwia
 */
public class BooksManager extends javax.swing.JPanel {

    /**
     * Creates new form BooksManager
     */
    public BooksManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableBook = new javax.swing.JTable();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JButton BtnAdd = new javax.swing.JButton();
        javax.swing.JButton BtnUpdate = new javax.swing.JButton();
        javax.swing.JButton BtnDelete = new javax.swing.JButton();
        BtnMain = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        tfBookID = new javax.swing.JTextField();
        tfBookISBNCode = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        tfBookTitle = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        tfBookAvailability = new javax.swing.JTextField();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        tfBookGenre = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        tfBookReturnedDate = new javax.swing.JTextField();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        tfBookLastBorrowedDate = new javax.swing.JTextField();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        tfBorrowerID = new javax.swing.JTextField();
        javax.swing.JButton BtnView = new javax.swing.JButton();
        javax.swing.JButton BtnSearch = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1080, 540));
        setLayout(null);

        TableBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Genre", "ISBN Code", "Availability ", "LBD", "Date Returned", "Borrower ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableBook);

        add(jScrollPane1);
        jScrollPane1.setBounds(6, 311, 1006, 226);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setText("Books");
        add(jLabel1);
        jLabel1.setBounds(430, 10, 230, 50);

        BtnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnAdd.setText("Add");
        BtnAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });
        add(BtnAdd);
        BtnAdd.setBounds(838, 121, 174, 31);

        BtnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnUpdate.setText("Update");
        BtnUpdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });
        add(BtnUpdate);
        BtnUpdate.setBounds(838, 219, 174, 31);

        BtnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnDelete.setText("Delete");
        BtnDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });
        add(BtnDelete);
        BtnDelete.setBounds(838, 268, 174, 31);

        BtnMain.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnMain.setText("Main Menu");
        BtnMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMainActionPerformed(evt);
            }
        });
        add(BtnMain);
        BtnMain.setBounds(840, 70, 170, 31);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("ID:");
        add(jLabel2);
        jLabel2.setBounds(30, 90, 16, 16);

        tfBookID.setText("Enter ID");
        add(tfBookID);
        tfBookID.setBounds(20, 110, 240, 22);

        tfBookISBNCode.setText("Enter ISBN code");
        tfBookISBNCode.setToolTipText("");
        add(tfBookISBNCode);
        tfBookISBNCode.setBounds(290, 110, 240, 22);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Title:");
        add(jLabel4);
        jLabel4.setBounds(30, 150, 110, 16);

        tfBookTitle.setText("Enter book title");
        add(tfBookTitle);
        tfBookTitle.setBounds(20, 170, 240, 22);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("ISBN Code:");
        add(jLabel5);
        jLabel5.setBounds(300, 90, 190, 16);

        tfBookAvailability.setText("Stock Available");
        add(tfBookAvailability);
        tfBookAvailability.setBounds(290, 170, 240, 22);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Genre:");
        add(jLabel6);
        jLabel6.setBounds(30, 220, 130, 16);

        tfBookGenre.setText("Enter book genre");
        add(tfBookGenre);
        tfBookGenre.setBounds(20, 240, 240, 22);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Returned Date:");
        add(jLabel7);
        jLabel7.setBounds(570, 90, 150, 16);

        tfBookReturnedDate.setText("Enter returned date");
        add(tfBookReturnedDate);
        tfBookReturnedDate.setBounds(560, 110, 250, 22);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Availability:");
        add(jLabel8);
        jLabel8.setBounds(300, 150, 200, 16);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Borrower ID:");
        add(jLabel9);
        jLabel9.setBounds(570, 150, 120, 16);

        tfBookLastBorrowedDate.setText("Enter last borrowed date");
        tfBookLastBorrowedDate.setName(""); // NOI18N
        add(tfBookLastBorrowedDate);
        tfBookLastBorrowedDate.setBounds(290, 240, 240, 22);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Last Borrowed Date:");
        add(jLabel10);
        jLabel10.setBounds(300, 220, 120, 16);

        tfBorrowerID.setText("Enter Borrower ID");
        tfBorrowerID.setName(""); // NOI18N
        add(tfBorrowerID);
        tfBorrowerID.setBounds(560, 170, 240, 22);

        BtnView.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnView.setText("View All");
        BtnView.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewActionPerformed(evt);
            }
        });
        add(BtnView);
        BtnView.setBounds(840, 170, 80, 30);

        BtnSearch.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnSearch.setText("Search ID");
        BtnSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        add(BtnSearch);
        BtnSearch.setBounds(930, 170, 80, 30);
    }// </editor-fold>//GEN-END:initComponents
private BookController bc;
    ValidationController vc = new ValidationController();
    Book book;
    private void populateTable(boolean search, boolean update) {
        try {
            bc = new BookController();
            DefaultTableModel model = (DefaultTableModel) TableBook.getModel();

            if (search) {
                // Perform search
                bc.viewAllBooks(tfBookID.getText());
            } else {
                // Retrieve all books
                bc.viewAllBooks("");
            }

            List<Book> books = bc.getBooks();

            // Clear existing rows
            model.setRowCount(0);

            if (books.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No books found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {
                // Populate the table with new data
                for (Book book : books) {
                    Object[] row = { book.getId(), book.getTitle(), book.getGenre(),book.getIsbn(),book.isAvailable(),book.getDateReturned(),book.getBorrowerID() };
                    model.addRow(row);
                }
                if (!update) {
                 JOptionPane.showMessageDialog(null, "books table successfully pulled!");   
                }                 
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Book table not pulled!", "Read Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }
    SimpleDateFormat formatter = new SimpleDateFormat("YYYY-MM-DD");
    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
        // TODO add your handling code here:
        try {
            bc = new BookController();
            
            int id = Integer.parseInt(tfBookID.getText());
            String title = tfBookTitle.getText();
            String genre = tfBookGenre.getText();
            String isbn = tfBookISBNCode.getText();
            boolean availability = Boolean.parseBoolean(tfBookAvailability.getText());
            Date LBD = formatter.parse(tfBookLastBorrowedDate.getText());
            Date RD = formatter.parse(tfBookReturnedDate.getText());
            int borrowerID = Integer.parseInt(tfBorrowerID.getText());
            
            
           
            String formattedLBD = formatter.format(LBD);
            String formattedRD = formatter.format(RD);

            
            book = new Book(id, title, genre,isbn,availability,LBD,RD,borrowerID);
            
            // Validate book
            ValidationController.ValidationResult result = vc.validateBook(book);

            if (result.isValid()) {
                // Add book to the database
                bc.addBook(book);
                //Pull and Update the table from DB
                populateTable(false, true);
                JOptionPane.showMessageDialog(null, "Book " + Integer.toString(book.getId()) + " successfully added!");
                
                // Clear fields
                tfBookID.setText("");
                tfBookTitle.setText("");
            tfBookGenre.setText("");
            tfBookISBNCode.setText("");
            tfBookAvailability.setText("");
            tfBookLastBorrowedDate.setText("");
            tfBookReturnedDate.setText("");
            tfBorrowerID.setText("");
                
            } else {
                // Display error dialog with the identifier result
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex){
            //JOptionPane.showMessageDialog(null, "Error: Invalid ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
        
        
    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        // TODO add your handling code here:
        try {
            bc = new BookController();
            
            int id = Integer.parseInt(tfBookID.getText());
            String title = tfBookTitle.getText();
            String genre = tfBookGenre.getText();
            String isbn = tfBookISBNCode.getText();
            boolean availability = Boolean.parseBoolean(tfBookAvailability.getText());
            Date LBD = formatter.parse(tfBookLastBorrowedDate.getText());
            Date RD = formatter.parse(tfBookReturnedDate.getText());
            int borrowerID = Integer.parseInt(tfBorrowerID.getText());
            
            
           
            String formattedLBD = formatter.format(LBD);
            String formattedRD = formatter.format(RD);

            
            book = new Book(id, title, genre,isbn,availability,LBD,RD,borrowerID);
            
            // Validate book
            ValidationController.ValidationResult result = vc.validateBook(book);

            if (result.isValid()) {
                // Add book to the database
                bc.updateBook(book);
                //Pull and Update the table from DB
                populateTable(false, true);
                JOptionPane.showMessageDialog(null, "Book " + Integer.toString(book.getId()) + " successfully added!");
                
                // Clear fields
                tfBookID.setText("");
                tfBookTitle.setText("");
            tfBookGenre.setText("");
            tfBookISBNCode.setText("");
            tfBookAvailability.setText("");
            tfBookLastBorrowedDate.setText("");
            tfBookReturnedDate.setText("");
            tfBorrowerID.setText("");
                
            } else {
                // Display error dialog with the identifier result
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex){
            //JOptionPane.showMessageDialog(null, "Error: Invalid ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            bc = new BookController();
            
            int id = Integer.parseInt(tfBookID.getText());
            String title = tfBookTitle.getText();
            String genre = tfBookGenre.getText();
            String isbn = tfBookISBNCode.getText();
            boolean availability = Boolean.parseBoolean(tfBookAvailability.getText());
            Date LBD = formatter.parse(tfBookLastBorrowedDate.getText());
            Date RD = formatter.parse(tfBookReturnedDate.getText());
            int borrowerID = Integer.parseInt(tfBorrowerID.getText());
            
            
           
            String formattedLBD = formatter.format(LBD);
            String formattedRD = formatter.format(RD);

            
            book = new Book(id, title, genre,isbn,availability,LBD,RD,borrowerID);
            
            // Validate book
            ValidationController.ValidationResult result = vc.validateBook(book);

            if (result.isValid()) {
                // Add book to the database
                bc.deleteBook(book);
                //Pull and Update the table from DB
                populateTable(false, true);
                JOptionPane.showMessageDialog(null, "Book " + Integer.toString(book.getId()) + " successfully added!");
                
                // Clear fields
                tfBookID.setText("");
                tfBookTitle.setText("");
            tfBookGenre.setText("");
            tfBookISBNCode.setText("");
            tfBookAvailability.setText("");
            tfBookLastBorrowedDate.setText("");
            tfBookReturnedDate.setText("");
            tfBorrowerID.setText("");
                
            } else {
                // Display error dialog with the identifier result
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex){
            //JOptionPane.showMessageDialog(null, "Error: Invalid ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMainActionPerformed
        // TODO add your handling code here:
        JFrame parentFrame = (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);
        if (parentFrame != null) {
            parentFrame.dispose();
        } else {
            System.out.println("No parent frame found.");
        }

        MainDashboard md = new MainDashboard();
        md.setVisible(true);
    }//GEN-LAST:event_BtnMainActionPerformed

    private void BtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewActionPerformed
        populateTable(false, false);
    }//GEN-LAST:event_BtnViewActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
        populateTable(true, false);
    }//GEN-LAST:event_BtnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnMain;
    private javax.swing.JTable TableBook;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfBookAvailability;
    private javax.swing.JTextField tfBookGenre;
    private javax.swing.JTextField tfBookID;
    private javax.swing.JTextField tfBookISBNCode;
    private javax.swing.JTextField tfBookLastBorrowedDate;
    private javax.swing.JTextField tfBookReturnedDate;
    private javax.swing.JTextField tfBookTitle;
    private javax.swing.JTextField tfBorrowerID;
    // End of variables declaration//GEN-END:variables
}
