
package view;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import controller.AuthorController;
import controller.ValidationController;
import java.util.List;
import model.Author;

public class AuthorsManager extends javax.swing.JPanel {

    /**
     * Creates new form AuthorsManager
     */
    public AuthorsManager() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableAuthors = new javax.swing.JTable();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JButton BtnAdd = new javax.swing.JButton();
        javax.swing.JButton BtnView = new javax.swing.JButton();
        BtnMain = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        tfAuthorID = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        tfAuthorName = new javax.swing.JTextField();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        tfAuthorLastName = new javax.swing.JTextField();
        javax.swing.JButton BtnReset = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        javax.swing.JButton BtnSearch = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1025, 640));

        TableAuthors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Last Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableAuthors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableAuthorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableAuthors);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setText("Authors");

        BtnAdd.setBackground(new java.awt.Color(110, 83, 83));
        BtnAdd.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnAdd.setForeground(new java.awt.Color(255, 255, 255));
        BtnAdd.setText("Add");
        BtnAdd.setBorder(null);
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });

        BtnView.setBackground(new java.awt.Color(110, 83, 83));
        BtnView.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnView.setForeground(new java.awt.Color(255, 255, 255));
        BtnView.setText("View All");
        BtnView.setBorder(null);
        BtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewActionPerformed(evt);
            }
        });

        BtnMain.setBackground(new java.awt.Color(110, 83, 83));
        BtnMain.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnMain.setForeground(new java.awt.Color(255, 255, 255));
        BtnMain.setText("Main Menu");
        BtnMain.setBorder(null);
        BtnMain.setMaximumSize(new java.awt.Dimension(28, 22));
        BtnMain.setMinimumSize(new java.awt.Dimension(28, 22));
        BtnMain.setPreferredSize(new java.awt.Dimension(28, 22));
        BtnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMainActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("ID:");

        tfAuthorID.setToolTipText("Enter ID");
        tfAuthorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAuthorIDActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Name:");

        tfAuthorName.setToolTipText("Enter your Name");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Last Name:");

        tfAuthorLastName.setToolTipText("Enter your Last Name");

        BtnReset.setBackground(new java.awt.Color(110, 83, 83));
        BtnReset.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnReset.setForeground(new java.awt.Color(255, 255, 255));
        BtnReset.setText("Reset");
        BtnReset.setBorder(null);
        BtnReset.setName(""); // NOI18N
        BtnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResetActionPerformed(evt);
            }
        });

        BtnUpdate.setBackground(new java.awt.Color(110, 83, 83));
        BtnUpdate.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        BtnUpdate.setText("Update");
        BtnUpdate.setBorder(null);
        BtnUpdate.setEnabled(false);
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(110, 83, 83));
        BtnDelete.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnDelete.setForeground(new java.awt.Color(255, 255, 255));
        BtnDelete.setText("Delete");
        BtnDelete.setBorder(null);
        BtnDelete.setEnabled(false);
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        BtnSearch.setBackground(new java.awt.Color(110, 83, 83));
        BtnSearch.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        BtnSearch.setForeground(new java.awt.Color(255, 255, 255));
        BtnSearch.setText("Search ID");
        BtnSearch.setBorder(null);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(431, 431, 431)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BtnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(BtnView, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BtnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfAuthorID, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfAuthorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(tfAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(527, 527, 527)
                                .addComponent(BtnMain, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 998, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(tfAuthorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnMain, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel4)
                .addGap(4, 4, 4)
                .addComponent(tfAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addComponent(tfAuthorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnView, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private AuthorController ac;
    ValidationController vc = new ValidationController();
    Author author;
    
    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
        try {
            ac = new AuthorController();
            
            int id = Integer.parseInt(tfAuthorID.getText());
            String name = tfAuthorName.getText();
            String lastName = tfAuthorLastName.getText();
            author = new Author(id, name, lastName);           
            ValidationController.ValidationResult result = vc.validateAuthor(author);   // Validate Author

            if (result.isValid()) {
                if (!authorExists(author.getId())){
                    ac.addAuthor(author);   // Add author to the database                 
                    populateTable(false, true); //Pull and Update the table from DB
                    JOptionPane.showMessageDialog(null, "Author " + Integer.toString(author.getId()) + " successfully added!");                              
                    clearFields();  // Clear fields
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Author " + author.getId() + " already exists", "Validation Error", JOptionPane.ERROR_MESSAGE);
                }               
            } else {                
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE); // Display error dialog with the identifier result
            }
        } catch (Exception ex){
            System.out.println(ex);
        }  
    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewActionPerformed
         populateTable(false, false);
    }//GEN-LAST:event_BtnViewActionPerformed

    private void BtnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMainActionPerformed
        JFrame parentFrame = (JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);
        if (parentFrame != null) {
            parentFrame.dispose();
        } else {
            System.out.println("No parent frame found.");
        }

        MainDashboard md = new MainDashboard();
        md.setVisible(true);
    }//GEN-LAST:event_BtnMainActionPerformed

    private void tfAuthorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAuthorIDActionPerformed
        
    }//GEN-LAST:event_tfAuthorIDActionPerformed

    private void BtnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResetActionPerformed
        clearFields();  // Clear text fields       
        tfAuthorID.setEnabled(true);    // Re-enable the ID text field                
        BtnUpdate.setEnabled(false);    // Disable Buttons
        BtnDelete.setEnabled(false);        
        TableAuthors.clearSelection();  // Deselect any selected row in the table
    }//GEN-LAST:event_BtnResetActionPerformed

    private void TableAuthorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableAuthorsMouseClicked
        // Check if a row is selected
        int selectedRow = TableAuthors.getSelectedRow();
    
        if (selectedRow != -1) {           
            Object idValue = TableAuthors.getValueAt(selectedRow, 0);   // Get values from the selected row
            Object firstNameValue = TableAuthors.getValueAt(selectedRow, 1);
            Object lastNameValue = TableAuthors.getValueAt(selectedRow, 2);
            
            String id = idValue != null ? idValue.toString() : "";  // Convert to String, defaulting to empty string if null
            String firstName = firstNameValue != null ? firstNameValue.toString() : "";
            String lastName = lastNameValue != null ? lastNameValue.toString() : "";
            
            tfAuthorID.setText(id);     // Set the values in text fields
            tfAuthorName.setText(firstName);
            tfAuthorLastName.setText(lastName);
           
            tfAuthorID.setEnabled(false);   // Disable the ID field and enable buttons
            BtnUpdate.setEnabled(true);
            BtnDelete.setEnabled(true);
        }
    }//GEN-LAST:event_TableAuthorsMouseClicked

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        try {
            ac = new AuthorController();
            
            int id = Integer.parseInt(tfAuthorID.getText());
            String name = tfAuthorName.getText();
            String lastName = tfAuthorLastName.getText();
            author = new Author(id, name, lastName);
           
            ValidationController.ValidationResult result = vc.validateAuthor(author);   // Validate Author

            if (result.isValid()) {                
                ac.updateAuthor(author);    // Add author to the database                
                populateTable(false, true); //Pull and Update the table from DB
                JOptionPane.showMessageDialog(null, "Author " + Integer.toString(author.getId()) + " successfully updated!");                               
                clearFields();  // Clear fields
            } else {                
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE); // Display error dialog with the identifier result
            }
        } catch (Exception ex){
            System.out.println(ex);
        }
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        try {
            ac = new AuthorController();
            
            int id = Integer.parseInt(tfAuthorID.getText());
            String name = tfAuthorName.getText();
            String lastName = tfAuthorLastName.getText();
            author = new Author(id, name, lastName);           
            ValidationController.ValidationResult result = vc.validateAuthor(author);   // Validate Author

            if (result.isValid()) {                
                ac.deleteAuthor(author);    // Add author to the database                
                populateTable(false, true); //Pull and Update the table from DB
                JOptionPane.showMessageDialog(null, "Author " + Integer.toString(author.getId()) + " successfully deleted!");                               
                clearFields();  // Clear fields
            } else {                
                JOptionPane.showMessageDialog(null, "Error: " + result.getIdentifier(), "Validation Error", JOptionPane.ERROR_MESSAGE); // Display error dialog with the identifier result
            }
        } catch (Exception ex){
            System.out.println(ex);
        }
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
        populateTable(true, false);
    }//GEN-LAST:event_BtnSearchActionPerformed

    private void populateTable(boolean search, boolean update) {
        try {
            ac = new AuthorController();
            DefaultTableModel model = (DefaultTableModel) TableAuthors.getModel();

            if (search) {                
                ac.viewAllAuthors(tfAuthorID.getText());    // Perform search
            } else {                
                ac.viewAllAuthors("");  // Retrieve all authors
            }

            List<Author> authors = ac.getAuthors();           
            model.setRowCount(0);   // Clear existing rows

            if (authors.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No authors found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {               
                for (Author author : authors) {
                    Object[] row = { author.getId(), author.getName(), author.getSurname() };   // Populate the table with new data
                    model.addRow(row);
                }
                if (!update) {
                 JOptionPane.showMessageDialog(null, "Author table successfully pulled!");   
                }                 
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Author table not pulled!", "Read Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }
    
    private void clearFields(){        
        tfAuthorID.setText("");
        tfAuthorName.setText("");
        tfAuthorLastName.setText("");
    }
    
    private boolean authorExists(int authorID) {
        try {
            ac = new AuthorController();            
            ac.viewAllAuthors("");    // Retrieve all Authors            
            List<Author> authors = ac.getAuthors();   // Get the list of all Authors            
            for (Author author : authors) {   // Check if any author's ID matches the provided authorID
                if (author.getId() == authorID) {
                    return true; // Author ID found
                }
            }           
            return false;   // No matching author ID found
        } catch (Exception ex) {           
            ex.printStackTrace();   // Print exception to the console and return false
            return false;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnMain;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTable TableAuthors;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfAuthorID;
    private javax.swing.JTextField tfAuthorLastName;
    private javax.swing.JTextField tfAuthorName;
    // End of variables declaration//GEN-END:variables
}
